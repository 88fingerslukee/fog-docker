# FOG Docker Environment Configuration
# ====================================
#
# QUICK START:
# 1. Copy this file to .env: cp .env.example .env
# 2. Edit .env and set the REQUIRED variables (marked below)
# 3. Run: docker compose up -d
#
# IMPORTANT: Variables marked as REQUIRED must be set before starting the container.
# Optional variables have sensible defaults and can be left unmodified.
#
# For detailed documentation, see the README.md file.

# =============================================================================
# REQUIRED CONFIGURATION
# =============================================================================

# FOG Web Host (REQUIRED - No default)
# This should be your server's IP address or FQDN that clients will use to access FOG
# Examples: 192.168.1.100, fog.example.com, fog.yourdomain.com
# For reverse proxy setups, use the FQDN that clients will connect to
FOG_WEB_HOST=

# Database Root Password (REQUIRED - No default)
# Generate a secure password for the MySQL root user
# This password will be used for the MySQL root account in the database container
FOG_DB_ROOT_PASSWORD=

# =============================================================================
# OPTIONAL CONFIGURATION
# =============================================================================

# FOG Version (Development only - for docker-compose-dev.yml)
# The FOG version to install (stable, dev-branch, or specific version)
FOG_VERSION=stable

# FOG Git Repository (Development only - for docker-compose-dev.yml)
# Custom fork or specific repository URL
FOG_GIT_URL=https://github.com/FOGProject/fogproject.git


# Web Configuration
FOG_WEB_ROOT=/fog
FOG_APACHE_PORT=80
FOG_APACHE_SSL_PORT=443
FOG_APACHE_EXPOSED_PORT=80
FOG_APACHE_EXPOSED_SSL_PORT=443

# SSL Configuration
# =================
# Choose one of the following HTTPS scenarios:

# Scenario 1: External certificates (Let's Encrypt, commercial, etc.)
# FOG_INTERNAL_HTTPS_ENABLED=true
# FOG_HTTP_PROTOCOL=https
# FOG_SSL_GENERATE_SELF_SIGNED=false
# FOG_SSL_CERT_FILE=fullchain.pem
# FOG_SSL_KEY_FILE=privkey.pem
# Mount certificates as volume: /path/to/certs:/opt/fog/snapins/ssl:ro

# Scenario 2: Self-signed certificates (iPXE will be recompiled with CA trust)
# FOG_INTERNAL_HTTPS_ENABLED=true
# FOG_HTTP_PROTOCOL=https
# FOG_SSL_GENERATE_SELF_SIGNED=true
# FOG_SSL_CN=192.168.1.100
# FOG_SSL_SAN=alt1.domain.com,alt2.domain.com

# Scenario 3: Reverse proxy (no SSL in container, proxy handles HTTPS)
# FOG_INTERNAL_HTTPS_ENABLED=false
# FOG_HTTP_PROTOCOL=https
# FOG_SSL_GENERATE_SELF_SIGNED=false

# Scenario 4: HTTP only (default - no encryption)
# FOG_INTERNAL_HTTPS_ENABLED=false
# FOG_HTTP_PROTOCOL=http
# FOG_SSL_GENERATE_SELF_SIGNED=false

# Current configuration (modify as needed):

FOG_INTERNAL_HTTPS_ENABLED=false
FOG_HTTP_PROTOCOL=https
FOG_SSL_CERT_FILE=server.crt
FOG_SSL_KEY_FILE=server.key
FOG_SSL_GENERATE_SELF_SIGNED=true
FOG_SSL_CN=
FOG_SSL_SAN=


# Database Configuration
# =====================
# These settings configure the connection to the MySQL database
# The database container will be created automatically
FOG_DB_HOST=fog-db
FOG_DB_PORT=3306
FOG_DB_NAME=fog
FOG_DB_USER=fogmaster
FOG_DB_PASS=fogmaster123

# Database Migration Configuration
# ================================
# Enable automatic database migration from bare metal FOG installation
# Requires FOG_MIGRATION_DUMP.sql file to be mounted at /opt/migration/FOG_MIGRATION_DUMP.sql
FOG_DB_MIGRATION_ENABLED=false
FOG_DB_MIGRATION_FORCE=false

# Network Configuration
# ====================

# Storage node hostname/IP (for FOG storage node configuration)
# This is the IP/hostname that FOG clients will use to access image storage
# Should be the same as FOG_WEB_HOST for single-server setups
# Examples: 192.168.1.100, fog.example.com
FOG_STORAGE_HOST=fog.progressive-sealing.com

# Wake-on-LAN server hostname/IP (for WOL functionality)
# This is the IP/hostname that will send WOL packets to wake up computers
# Usually localhost for single-server setups
FOG_WOL_HOST=localhost

# Network interface for multicast operations
FOG_MULTICAST_INTERFACE=eth0

# FOG User Configuration
# =====================
# These credentials are used for the main FOG user account
# This user is used for FTP access, service operations, and general FOG functionality
# The user will be created automatically with these credentials
# 
# NOTE: This is SEPARATE from the FOG web UI admin user
# The web UI admin user is created during database initialization with:
# Username: fog
# Password: password
# You MUST change this immediately after first login for security!
FOG_USER=fogproject
FOG_PASS=fogftp123

# FTP Passive Mode Configuration
# Port range for FTP passive mode data connections
# These ports must be accessible from external clients
FOG_FTP_PASV_MIN_PORT=21100
FOG_FTP_PASV_MAX_PORT=21110

# Secure Boot Configuration
# Enable Secure Boot support (requires shim binaries and proper UEFI setup)
FOG_SECURE_BOOT_ENABLED=false

# Secure Boot Paths (optional - uses defaults if not specified)
# FOG_SECURE_BOOT_KEYS_DIR=/opt/fog/secure-boot/keys
# FOG_SECURE_BOOT_CERT_DIR=/opt/fog/secure-boot/certs
# FOG_SECURE_BOOT_SHIM_DIR=/opt/fog/secure-boot/shim
# FOG_SECURE_BOOT_MOK_IMG=/opt/fog/secure-boot/mok-certs.img

# DHCP Configuration
# ==================
# These settings configure the DHCP server that provides PXE boot information
# Note: FOG Docker can optionally run a DHCP server, but most setups use an existing DHCP server

# TFTP server hostname/IP (for PXE boot)
# This is the IP/hostname that PXE clients will receive in DHCP option 66 (next-server)
# PXE clients use this to download boot files via TFTP
# Should be the same as FOG_WEB_HOST for single-server setups
# Examples: 192.168.1.100, fog.example.com
FOG_TFTP_HOST=

# Enable FOG's built-in DHCP server (optional)
# Set to true if you want FOG to handle DHCP, false if using existing DHCP server
FOG_DHCP_ENABLED=false

# DHCP Network Configuration (only used if FOG_DHCP_ENABLED=true)
FOG_DHCP_SUBNET=192.168.1.0
FOG_DHCP_NETMASK=255.255.255.0
FOG_DHCP_ROUTER=192.168.1.1
FOG_DHCP_DOMAIN_NAME=fog.local

# DHCP Lease Configuration (only used if FOG_DHCP_ENABLED=true)
FOG_DHCP_DEFAULT_LEASE_TIME=600
FOG_DHCP_MAX_LEASE_TIME=7200

# DHCP IP address range (only used if FOG_DHCP_ENABLED=true)
FOG_DHCP_START_RANGE=192.168.1.100
FOG_DHCP_END_RANGE=192.168.1.200

# PXE boot file names (sent to clients in DHCP option 67)
# These are the initial boot files that PXE clients will download
# The DHCP server automatically selects the appropriate file based on client architecture
FOG_DHCP_BOOTFILE_BIOS=undionly.kpxe
FOG_DHCP_BOOTFILE_UEFI32=ipxe32.efi
FOG_DHCP_BOOTFILE_UEFI64=ipxe.efi
FOG_DHCP_BOOTFILE_ARM32=arm32.efi
FOG_DHCP_BOOTFILE_ARM64=arm64.efi

# Optional: HTTP boot support (for clients that support HTTPBoot)
# FOG_DHCP_HTTPBOOT_ENABLED=false

# DNS servers to provide to DHCP clients
FOG_DHCP_DNS=8.8.8.8

# Timezone Configuration
# Set the timezone for the container (default: UTC)
# Examples: UTC, America/New_York, Europe/London, Asia/Tokyo
TZ=UTC

# Debug Configuration
# Enable debug mode for troubleshooting
DEBUG=false

# Force First Start Init (Debugging)
# Force FOG first start initialization even if already completed
# FORCE_FIRST_START_INIT=false